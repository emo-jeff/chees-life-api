openapi: 3.0.3
info:
  title: "Chee's Life"
  description: 'Use "Accept-Language" as lang Header, support `tc` or `en`'
  version: 1.0.0
servers:
  -
    url: 'https://chees-api.dev.com'
paths:
  /api/auth/login:
    post:
      summary: Login
      operationId: login
      description: Login
      parameters: []
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The id of the user.'
                  example: emohk
                password:
                  type: string
                  description: 'The password of the user.'
                  example: emohk
                remember:
                  type: boolean
                  description: 'The remember me option.'
                  example: null
              required:
                - name
                - password
                - remember
      security: []
  /api/auth/logout:
    get:
      summary: Logout
      operationId: logout
      description: Logout
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
  /api/auth/user:
    get:
      summary: User
      operationId: user
      description: 'Retrieve user info'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
  /api/auth/user/update-password:
    post:
      summary: 'Update Password'
      operationId: updatePassword
      description: 'Update password'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: ''
                  example: recusandae
                newPassword:
                  type: string
                  description: ''
                  example: recusandae
              required:
                - currentPassword
                - newPassword
  /api/users:
    get:
      summary: 'User List'
      operationId: userList
      description: 'User list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: itaque
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: itaque
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 6
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 6
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept id,name,email,role.name'
          example: id
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept id,name,email,role.name'
            example: id
        -
          in: query
          name: 'filter[id]'
          description: 'Filter by id'
          example: dolores
          required: true
          schema:
            type: string
            description: 'Filter by id'
            example: dolores
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by name'
          example: 12
          required: true
          schema:
            type: integer
            description: 'Filter by name'
            example: 12
        -
          in: query
          name: 'filter[email]'
          description: 'Filter by email'
          example: quisquam
          required: true
          schema:
            type: string
            description: 'Filter by email'
            example: quisquam
        -
          in: query
          name: 'filter[role.name]'
          description: 'Filter by role name'
          example: recusandae
          required: true
          schema:
            type: string
            description: 'Filter by role name'
            example: recusandae
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'User Create'
      operationId: userCreate
      description: 'User create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: eaque
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: mann.ford@example.net
                password:
                  type: string
                  description: ''
                  example: 'F"bH::d&I='
                role_name:
                  type: string
                  description: ''
                  example: inventore
              required:
                - name
                - password
                - role_name
  '/api/users/{id}':
    get:
      summary: 'User Detail'
      operationId: userDetail
      description: 'User detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'User Update'
      operationId: userUpdate
      description: 'User update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: nulla
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: fschroeder@example.org
                password:
                  type: string
                  description: ''
                  example: GpS1Px
                role_name:
                  type: string
                  description: ''
                  example: voluptatem
              required:
                - name
                - role_name
    delete:
      summary: 'User Destroy'
      operationId: userDestroy
      description: 'User destroy'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  /api/reviews:
    get:
      summary: 'Review List'
      operationId: reviewList
      description: 'Review list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: sit
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: sit
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 8
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 8
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept review_date,rating,enable,translations.customer_name#en,translations.customer_name#tc'
          example: '-id'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept review_date,rating,enable,translations.customer_name#en,translations.customer_name#tc'
            example: '-id'
        -
          in: query
          name: 'filter[review_date]'
          description: 'Filter by review_date'
          example: perspiciatis
          required: true
          schema:
            type: string
            description: 'Filter by review_date'
            example: perspiciatis
        -
          in: query
          name: 'filter[rating]'
          description: 'Filter by rating'
          example: 8
          required: true
          schema:
            type: integer
            description: 'Filter by rating'
            example: 8
        -
          in: query
          name: 'filter[enable]'
          description: 'Filter by enable'
          example: 3
          required: true
          schema:
            type: integer
            description: 'Filter by enable'
            example: 3
        -
          in: query
          name: 'filter[translations.customer_name]'
          description: 'Filter by translations.customer_name'
          example: quis
          required: true
          schema:
            type: string
            description: 'Filter by translations.customer_name'
            example: quis
        -
          in: query
          name: 'filter[translations.content]'
          description: 'Filter by translations.content'
          example: commodi
          required: true
          schema:
            type: string
            description: 'Filter by translations.content'
            example: commodi
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'Review Create'
      operationId: reviewCreate
      description: 'Review create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                rating:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 5.'
                  example: 3
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    customer_name:
                      type: string
                      description: ''
                      example: voluptatem
                    content:
                      type: string
                      description: ''
                      example: iure
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    customer_name:
                      type: string
                      description: ''
                      example: voluptatibus
                    content:
                      type: string
                      description: ''
                      example: et
                enable:
                  type: boolean
                  description: ''
                  example: false
              required:
                - review_date
                - rating
                - en
                - tc
                - enable
  '/api/reviews/{id}':
    get:
      summary: 'Review Detail'
      operationId: reviewDetail
      description: 'Review detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Review Update'
      operationId: reviewUpdate
      description: 'Review update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                rating:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 5.'
                  example: 5
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    customer_name:
                      type: string
                      description: ''
                      example: dolore
                    content:
                      type: string
                      description: ''
                      example: et
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    customer_name:
                      type: string
                      description: ''
                      example: consequatur
                    content:
                      type: string
                      description: ''
                      example: ut
                enable:
                  type: boolean
                  description: ''
                  example: false
              required:
                - review_date
                - rating
                - en
                - tc
                - enable
    delete:
      summary: 'Review Delete'
      operationId: reviewDelete
      description: 'Review delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the review.'
        example: 1
        required: true
        schema:
          type: integer
  /api/districts:
    get:
      summary: 'District List'
      operationId: districtList
      description: 'District list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: et
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: et
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 8
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 8
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept sequence,name,enable,translations.name#en,translations.name#tc'
          example: '-id'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept sequence,name,enable,translations.name#en,translations.name#tc'
            example: '-id'
        -
          in: query
          name: 'filter[sequence]'
          description: 'Filter by sequence'
          example: 15
          required: true
          schema:
            type: integer
            description: 'Filter by sequence'
            example: 15
        -
          in: query
          name: 'filter[enable]'
          description: 'Filter by enable'
          example: 16
          required: true
          schema:
            type: integer
            description: 'Filter by enable'
            example: 16
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by name'
          example: adipisci
          required: true
          schema:
            type: string
            description: 'Filter by name'
            example: adipisci
        -
          in: query
          name: 'filter[translations.name]'
          description: 'Filter by translations.name#en'
          example: inventore
          required: true
          schema:
            type: string
            description: 'Filter by translations.name#en'
            example: inventore
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'District Create'
      operationId: districtCreate
      description: 'District create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                extra_charge:
                  type: integer
                  description: ''
                  example: 6
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: voluptas
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: magnam
                enable:
                  type: boolean
                  description: ''
                  example: false
              required:
                - extra_charge
                - en
                - tc
                - enable
  '/api/districts/{id}':
    get:
      summary: 'District Detail'
      operationId: districtDetail
      description: 'District detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'District Update'
      operationId: districtUpdate
      description: 'District update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                extra_charge:
                  type: integer
                  description: ''
                  example: 10
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: nostrum
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: ducimus
                enable:
                  type: boolean
                  description: ''
                  example: true
              required:
                - extra_charge
                - en
                - tc
                - enable
    delete:
      summary: 'District Delete'
      operationId: districtDelete
      description: 'District delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the district.'
        example: 4
        required: true
        schema:
          type: integer
  /api/categories:
    get:
      summary: 'Category List'
      operationId: categoryList
      description: 'Category list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: facilis
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: facilis
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 10
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 10
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept sequence,slug,enable,translations.name#en,translations.name#tc,translations.description#en,translations.description#tc,translations.title#en,translations.title#tc'
          example: '-sequence'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept sequence,slug,enable,translations.name#en,translations.name#tc,translations.description#en,translations.description#tc,translations.title#en,translations.title#tc'
            example: '-sequence'
        -
          in: query
          name: 'filter[sequence]'
          description: 'Filter by sequence'
          example: 7
          required: true
          schema:
            type: integer
            description: 'Filter by sequence'
            example: 7
        -
          in: query
          name: 'filter[enable]'
          description: 'Filter by enable'
          example: 6
          required: true
          schema:
            type: integer
            description: 'Filter by enable'
            example: 6
        -
          in: query
          name: 'filter[slug]'
          description: 'Filter by slug'
          example: neque
          required: true
          schema:
            type: string
            description: 'Filter by slug'
            example: neque
        -
          in: query
          name: 'filter[translations.name]'
          description: 'Filter by name'
          example: nisi
          required: true
          schema:
            type: string
            description: 'Filter by name'
            example: nisi
        -
          in: query
          name: 'filter[translations.description]'
          description: 'Filter by description'
          example: quia
          required: true
          schema:
            type: string
            description: 'Filter by description'
            example: quia
        -
          in: query
          name: 'filter[translations.title]'
          description: 'Filter by title'
          example: pariatur
          required: true
          schema:
            type: string
            description: 'Filter by title'
            example: pariatur
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'Category Create'
      operationId: categoryCreate
      description: 'Category create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: tempora
                    title:
                      type: string
                      description: ''
                      example: ratione
                    description:
                      type: string
                      description: ''
                      example: 'In ipsam omnis sed consequatur.'
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: consectetur
                    title:
                      type: string
                      description: ''
                      example: aut
                    description:
                      type: string
                      description: ''
                      example: 'Et ducimus laborum sequi.'
                enable:
                  type: boolean
                  description: ''
                  example: true
              required:
                - en
                - tc
                - enable
  '/api/categories/{id}':
    get:
      summary: 'Category Detail'
      operationId: categoryDetail
      description: 'Category detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Category Update'
      operationId: categoryUpdate
      description: 'Category update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: tenetur
                    title:
                      type: string
                      description: ''
                      example: culpa
                    description:
                      type: string
                      description: ''
                      example: 'Sit quo ut aliquid et voluptatem voluptatem.'
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    name:
                      type: string
                      description: ''
                      example: fuga
                    title:
                      type: string
                      description: ''
                      example: dolorum
                    description:
                      type: string
                      description: ''
                      example: 'Molestiae vel velit provident et.'
                enable:
                  type: boolean
                  description: ''
                  example: false
              required:
                - en
                - tc
                - enable
    delete:
      summary: 'Category Detail'
      operationId: categoryDetail
      description: 'Category detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 10
        required: true
        schema:
          type: integer
  /api/customers:
    get:
      summary: 'Customer List'
      operationId: customerList
      description: 'Customer list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: architecto
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: architecto
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 14
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 14
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept id,name,gender,email,address,tel,hkid,birthday'
          example: '-id'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept id,name,gender,email,address,tel,hkid,birthday'
            example: '-id'
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by name'
          example: impedit
          required: true
          schema:
            type: string
            description: 'Filter by name'
            example: impedit
        -
          in: query
          name: 'filter[gender]'
          description: 'Filter by gender'
          example: molestias
          required: true
          schema:
            type: string
            description: 'Filter by gender'
            example: molestias
        -
          in: query
          name: 'filter[email]'
          description: 'Filter by email'
          example: doloremque
          required: true
          schema:
            type: string
            description: 'Filter by email'
            example: doloremque
        -
          in: query
          name: 'filter[address]'
          description: 'Filter by address'
          example: et
          required: true
          schema:
            type: string
            description: 'Filter by address'
            example: et
        -
          in: query
          name: 'filter[tel]'
          description: 'Filter by tel'
          example: rem
          required: true
          schema:
            type: string
            description: 'Filter by tel'
            example: rem
        -
          in: query
          name: 'filter[hkid]'
          description: 'Filter by hkid'
          example: doloremque
          required: true
          schema:
            type: string
            description: 'Filter by hkid'
            example: doloremque
        -
          in: query
          name: 'filter[birthday]'
          description: 'Filter by birthday'
          example: nulla
          required: true
          schema:
            type: string
            description: 'Filter by birthday'
            example: nulla
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'Customer Create'
      operationId: customerCreate
      description: 'Customer create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: quia
                gender:
                  type: string
                  description: ''
                  example: dolores
                birthday:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                hkid:
                  type: string
                  description: ''
                  example: commodi
                tel:
                  type: string
                  description: ''
                  example: perspiciatis
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: usporer@example.org
                address:
                  type: string
                  description: ''
                  example: totam
                password:
                  type: string
                  description: ''
                  example: '-2TjCnxZo*-'
                is_verified:
                  type: boolean
                  description: ''
                  example: false
              required:
                - name
                - gender
                - birthday
                - hkid
                - tel
                - email
                - password
  '/api/customers/{id}':
    get:
      summary: 'Customer Detail'
      operationId: customerDetail
      description: 'Customer detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Customer Update'
      operationId: customerUpdate
      description: 'Customer update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: magnam
                gender:
                  type: string
                  description: ''
                  example: ab
                birthday:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                hkid:
                  type: string
                  description: ''
                  example: odit
                tel:
                  type: string
                  description: ''
                  example: in
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: kay56@example.org
                address:
                  type: string
                  description: ''
                  example: quam
                password:
                  type: string
                  description: ''
                  example: '8!j3QJJ[I)'
                is_verified:
                  type: boolean
                  description: ''
                  example: false
              required:
                - name
                - gender
                - birthday
                - hkid
                - tel
                - email
    delete:
      summary: 'Customer Destroy'
      operationId: customerDestroy
      description: 'Customer destroy'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the customer.'
        example: 19
        required: true
        schema:
          type: integer
  /api/banners:
    get:
      summary: 'Banner List'
      operationId: bannerList
      description: 'Banner list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: ipsa
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: ipsa
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 13
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 13
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept id,sequence,enable'
          example: '-id'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept id,sequence,enable'
            example: '-id'
        -
          in: query
          name: 'filter[id]'
          description: 'Filter by id'
          example: quam
          required: true
          schema:
            type: string
            description: 'Filter by id'
            example: quam
        -
          in: query
          name: 'filter[sequence]'
          description: 'Filter by sequence'
          example: 13
          required: true
          schema:
            type: integer
            description: 'Filter by sequence'
            example: 13
        -
          in: query
          name: 'filter[enable]'
          description: 'Filter by enable'
          example: 18
          required: true
          schema:
            type: integer
            description: 'Filter by enable'
            example: 18
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
  '/api/banners/{id}':
    get:
      summary: 'Banner Detail'
      operationId: bannerDetail
      description: 'Banner detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Banner Update'
      operationId: bannerUpdate
      description: 'Banner update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: image
                enable:
                  type: boolean
                  description: ''
                  example: true
              required:
                - image
    delete:
      summary: 'Banner Delete'
      operationId: bannerDelete
      description: 'Banner delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the banner.'
        example: 5
        required: true
        schema:
          type: integer
  /api/services:
    get:
      summary: 'Service List'
      operationId: serviceList
      description: 'Service list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: error
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: error
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 7
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 7
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept sequence,slug,price,hot,enable,translations.title#en,translations.title#tc,translations.subtitle#en,translations.subtitle#tc'
          example: '-sequence'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept sequence,slug,price,hot,enable,translations.title#en,translations.title#tc,translations.subtitle#en,translations.subtitle#tc'
            example: '-sequence'
        -
          in: query
          name: 'filter[sequence]'
          description: 'Filter by sequence'
          example: aliquam
          required: true
          schema:
            type: string
            description: 'Filter by sequence'
            example: aliquam
        -
          in: query
          name: 'filter[slug]'
          description: 'Filter by slug'
          example: ex
          required: true
          schema:
            type: string
            description: 'Filter by slug'
            example: ex
        -
          in: query
          name: 'filter[price]'
          description: 'Filter by price'
          example: ut
          required: true
          schema:
            type: string
            description: 'Filter by price'
            example: ut
        -
          in: query
          name: 'filter[hot]'
          description: 'Filter by hot'
          example: omnis
          required: true
          schema:
            type: string
            description: 'Filter by hot'
            example: omnis
        -
          in: query
          name: 'filter[enable]'
          description: 'Filter by enable'
          example: optio
          required: true
          schema:
            type: string
            description: 'Filter by enable'
            example: optio
        -
          in: query
          name: 'filter[translations.title]'
          description: 'Filter by title'
          example: ea
          required: true
          schema:
            type: string
            description: 'Filter by title'
            example: ea
        -
          in: query
          name: 'filter[translations.subtitle]'
          description: 'Filter by subtitle'
          example: et
          required: true
          schema:
            type: string
            description: 'Filter by subtitle'
            example: et
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'Service Create'
      operationId: serviceCreate
      description: 'Service create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                price:
                  type: integer
                  description: ''
                  example: 13
                hot:
                  type: boolean
                  description: ''
                  example: true
                enable:
                  type: boolean
                  description: ''
                  example: true
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    title:
                      type: string
                      description: ''
                      example: non
                    subtitle:
                      type: string
                      description: ''
                      example: et
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    title:
                      type: string
                      description: ''
                      example: modi
                    subtitle:
                      type: string
                      description: ''
                      example: cumque
                image:
                  type: string
                  format: binary
                  description: 'Must be an image.'
                service_descriptions:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      en:
                        type: object
                        description: ''
                        example: []
                        properties:
                          description:
                            type: string
                            description: ''
                            example: 'Et quo iste fugiat aspernatur rerum aut et.'
                      tc:
                        type: object
                        description: ''
                        example: []
                        properties:
                          description:
                            type: string
                            description: ''
                            example: 'Ipsum deleniti aut nesciunt sunt.'
                service_details:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      en:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: voluptatum
                          content:
                            type: string
                            description: ''
                            example: necessitatibus
                      tc:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: quod
                          content:
                            type: string
                            description: ''
                            example: ullam
              required:
                - price
                - enable
                - en
                - tc
  '/api/services/{id}':
    get:
      summary: 'Service Detail'
      operationId: serviceDetail
      description: 'Service detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Service Update'
      operationId: serviceUpdate
      description: 'Service update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                price:
                  type: integer
                  description: ''
                  example: 10
                hot:
                  type: boolean
                  description: ''
                  example: false
                enable:
                  type: boolean
                  description: ''
                  example: false
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    title:
                      type: string
                      description: ''
                      example: distinctio
                    subtitle:
                      type: string
                      description: ''
                      example: quia
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    title:
                      type: string
                      description: ''
                      example: impedit
                    subtitle:
                      type: string
                      description: ''
                      example: itaque
                image:
                  type: string
                  format: binary
                  description: 'Must be an image.'
                service_descriptions:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: ''
                        example: 12
                      sequence:
                        type: integer
                        description: ''
                        example: 12
                      en:
                        type: object
                        description: ''
                        example: []
                        properties:
                          description:
                            type: string
                            description: ''
                            example: 'Quaerat impedit hic officiis hic at placeat.'
                      tc:
                        type: object
                        description: ''
                        example: []
                        properties:
                          description:
                            type: string
                            description: ''
                            example: 'Velit ab quia laborum nihil sit inventore est voluptatum.'
                service_details:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: ''
                        example: 1
                      sequence:
                        type: integer
                        description: ''
                        example: 15
                      en:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: doloribus
                          content:
                            type: string
                            description: ''
                            example: nulla
                      tc:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: non
                          content:
                            type: string
                            description: ''
                            example: consequatur
              required:
                - price
                - enable
                - en
                - tc
    delete:
      summary: 'Service Delete'
      operationId: serviceDelete
      description: 'Service delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the service.'
        example: 1
        required: true
        schema:
          type: integer
  /api/roles:
    get:
      summary: 'Role List'
      operationId: roleList
      description: 'Role list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: facilis
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: facilis
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 14
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 14
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept id,sequence'
          example: id
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept id,sequence'
            example: id
        -
          in: query
          name: 'filter[id]'
          description: 'Filter by id'
          example: ducimus
          required: true
          schema:
            type: string
            description: 'Filter by id'
            example: ducimus
        -
          in: query
          name: 'filter[sequence]'
          description: 'Filter by sequence'
          example: 16
          required: true
          schema:
            type: integer
            description: 'Filter by sequence'
            example: 16
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'Role Create'
      operationId: roleCreate
      description: 'Role create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: dolor
                permissions:
                  type: array
                  description: ''
                  example:
                    - et
                  items:
                    type: string
              required:
                - name
  '/api/roles/{id}':
    get:
      summary: 'Role Detail'
      operationId: roleDetail
      description: 'Role detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Role Update'
      operationId: roleUpdate
      description: 'Role update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: alias
                permissions:
                  type: array
                  description: ''
                  example:
                    - hic
                  items:
                    type: string
              required:
                - name
    delete:
      summary: 'Role Delete'
      operationId: roleDelete
      description: 'Role delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
  /api/customer_histories:
    get:
      summary: 'Customer History List'
      operationId: customerHistoryList
      description: 'Customer history list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: est
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: est
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 8
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 8
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept customer_id,name,gender,birthday,hkid,tel,email,address,amount,created_at,translation.district#en,translation.district#tc,translation.title#en,translation.title#tc'
          example: '-created_at'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept customer_id,name,gender,birthday,hkid,tel,email,address,amount,created_at,translation.district#en,translation.district#tc,translation.title#en,translation.title#tc'
            example: '-created_at'
        -
          in: query
          name: 'filter[customer_id]'
          description: 'Filter by customer_id'
          example: aut
          required: true
          schema:
            type: string
            description: 'Filter by customer_id'
            example: aut
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by name'
          example: veniam
          required: true
          schema:
            type: string
            description: 'Filter by name'
            example: veniam
        -
          in: query
          name: 'filter[gender]'
          description: 'Filter by gender'
          example: molestiae
          required: true
          schema:
            type: string
            description: 'Filter by gender'
            example: molestiae
        -
          in: query
          name: 'filter[birthday]'
          description: 'Filter by birthday'
          example: nihil
          required: true
          schema:
            type: string
            description: 'Filter by birthday'
            example: nihil
        -
          in: query
          name: 'filter[hkid]'
          description: 'Filter by hkid'
          example: ab
          required: true
          schema:
            type: string
            description: 'Filter by hkid'
            example: ab
        -
          in: query
          name: 'filter[tel]'
          description: 'Filter by tel'
          example: inventore
          required: true
          schema:
            type: string
            description: 'Filter by tel'
            example: inventore
        -
          in: query
          name: 'filter[email]'
          description: 'Filter by email'
          example: sit
          required: true
          schema:
            type: string
            description: 'Filter by email'
            example: sit
        -
          in: query
          name: 'filter[address]'
          description: 'Filter by address'
          example: illo
          required: true
          schema:
            type: string
            description: 'Filter by address'
            example: illo
        -
          in: query
          name: 'filter[amount]'
          description: 'Filter by amount'
          example: quasi
          required: true
          schema:
            type: string
            description: 'Filter by amount'
            example: quasi
        -
          in: query
          name: 'filter[created_at]'
          description: 'Filter by created_at'
          example: non
          required: true
          schema:
            type: string
            description: 'Filter by created_at'
            example: non
        -
          in: query
          name: 'filter[translations.district]'
          description: 'Filter by district'
          example: et
          required: true
          schema:
            type: string
            description: 'Filter by district'
            example: et
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'Customer History Store'
      operationId: customerHistoryStore
      description: 'Customer history store'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                  description: ''
                  example: null
                name:
                  type: string
                  description: ''
                  example: recusandae
                gender:
                  type: string
                  description: 'Must be one of <code>F</code> or <code>M</code>.'
                  example: M
                birthday:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                hkid:
                  type: string
                  description: ''
                  example: nesciunt
                tel:
                  type: string
                  description: ''
                  example: et
                email:
                  type: string
                  description: ''
                  example: russ56@example.com
                medical_record:
                  type: string
                  description: ''
                  example: ullam
                covid_diagnosed:
                  type: boolean
                  description: ''
                  example: false
                covid_close_contacts:
                  type: boolean
                  description: ''
                  example: true
                covid_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                height:
                  type: string
                  description: 'Must be between 0 and 3 digits.'
                  example: ''
                weight:
                  type: string
                  description: 'Must be between 0 and 3 digits.'
                  example: '61'
                blood_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                blood_time:
                  type: string
                  description: ''
                  example: ullam
                address:
                  type: string
                  description: ''
                  example: aut
                report:
                  type: string
                  description: 'Must be one of <code>email</code> or <code>doctor</code>.'
                  example: doctor
                remark:
                  type: string
                  description: ''
                  example: laborum
                paid:
                  type: boolean
                  description: ''
                  example: false
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    district:
                      type: string
                      description: ''
                      example: sapiente
                    subtitle:
                      type: string
                      description: ''
                      example: sit
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    district:
                      type: string
                      description: ''
                      example: necessitatibus
                    subtitle:
                      type: string
                      description: ''
                      example: tenetur
                customer_history_details:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      price:
                        type: string
                        description: ''
                        example: rerum
                      en:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: ut
                      tc:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: est
                    required:
                      - price
              required:
                - name
                - gender
                - birthday
                - hkid
                - tel
                - email
                - medical_record
                - covid_diagnosed
                - covid_close_contacts
                - height
                - weight
                - blood_date
                - blood_time
                - address
                - report
  '/api/customer_histories/{id}':
    get:
      summary: 'Customer History Detail'
      operationId: customerHistoryDetail
      description: 'Customer history detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Customer History Update'
      operationId: customerHistoryUpdate
      description: 'Customer history update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                  description: ''
                  example: null
                name:
                  type: string
                  description: ''
                  example: fugit
                gender:
                  type: string
                  description: 'Must be one of <code>F</code> or <code>M</code>.'
                  example: F
                birthday:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                hkid:
                  type: string
                  description: ''
                  example: enim
                tel:
                  type: string
                  description: ''
                  example: rem
                email:
                  type: string
                  description: ''
                  example: hobart95@example.com
                medical_record:
                  type: string
                  description: ''
                  example: voluptate
                covid_diagnosed:
                  type: boolean
                  description: ''
                  example: false
                covid_close_contacts:
                  type: boolean
                  description: ''
                  example: false
                covid_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                height:
                  type: string
                  description: 'Must be between 0 and 3 digits.'
                  example: '86'
                weight:
                  type: string
                  description: 'Must be between 0 and 3 digits.'
                  example: ''
                blood_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                blood_time:
                  type: string
                  description: ''
                  example: vel
                address:
                  type: string
                  description: ''
                  example: necessitatibus
                report:
                  type: string
                  description: 'Must be one of <code>email</code> or <code>doctor</code>.'
                  example: doctor
                remark:
                  type: string
                  description: ''
                  example: ea
                paid:
                  type: boolean
                  description: ''
                  example: false
                en:
                  type: object
                  description: ''
                  example: []
                  properties:
                    district:
                      type: string
                      description: ''
                      example: necessitatibus
                    subtitle:
                      type: string
                      description: ''
                      example: accusantium
                tc:
                  type: object
                  description: ''
                  example: []
                  properties:
                    district:
                      type: string
                      description: ''
                      example: consequatur
                    subtitle:
                      type: string
                      description: ''
                      example: sed
                customer_history_details:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      price:
                        type: string
                        description: ''
                        example: illum
                      en:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: deleniti
                      tc:
                        type: object
                        description: ''
                        example: []
                        properties:
                          title:
                            type: string
                            description: ''
                            example: provident
                    required:
                      - price
              required:
                - name
                - gender
                - birthday
                - hkid
                - tel
                - email
                - medical_record
                - covid_diagnosed
                - covid_close_contacts
                - height
                - weight
                - blood_date
                - blood_time
                - address
                - report
    delete:
      summary: 'Customer History Delete'
      operationId: customerHistoryDelete
      description: 'Customer history delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the customer history.'
        example: 1
        required: true
        schema:
          type: integer
  /api/timeslots:
    get:
      summary: 'User List'
      operationId: userList
      description: 'User list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: fuga
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: fuga
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 15
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 15
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept available_date,enable'
          example: '-available_date'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept available_date,enable'
            example: '-available_date'
        -
          in: query
          name: 'filter[available]'
          description: 'Filter by available'
          example: error
          required: true
          schema:
            type: string
            description: 'Filter by available'
            example: error
        -
          in: query
          name: 'filter[enable]'
          description: 'Filter by enable'
          example: 1
          required: true
          schema:
            type: integer
            description: 'Filter by enable'
            example: 1
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    post:
      summary: 'User Create'
      operationId: userCreate
      description: 'User create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date_from:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                date_to:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                time_from:
                  type: string
                  description: 'Must be a valid date in the format <code>H:i:s</code>.'
                  example: '06:58:47'
                time_to:
                  type: string
                  description: 'Must be a valid date in the format <code>H:i:s</code>.'
                  example: '06:58:47'
                interval:
                  type: integer
                  description: ''
                  example: 8
                enable:
                  type: boolean
                  description: ''
                  example: false
                quota:
                  type: integer
                  description: ''
                  example: 11
              required:
                - date_from
                - date_to
                - time_from
                - time_to
                - interval
                - enable
                - quota
  '/api/timeslots/{id}':
    get:
      summary: 'User Detail'
      operationId: userDetail
      description: 'User detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'User Update'
      operationId: userUpdate
      description: 'User update'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                available_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2023-06-09T06:58:47'
                enable:
                  type: boolean
                  description: ''
                  example: true
                timeslot_quotas:
                  type: array
                  description: ''
                  example:
                    - voluptatem
                  items:
                    type: integer
              required:
                - available_date
                - enable
                - timeslot_quotas
    delete:
      summary: 'User Delete'
      operationId: userDelete
      description: 'User delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the timeslot.'
        example: 31
        required: true
        schema:
          type: integer
  /api/social_medias:
    get:
      summary: 'Social Media List'
      operationId: socialMediaList
      description: 'Social media list'
      parameters:
        -
          in: query
          name: s
          description: 'Search keyword'
          example: omnis
          required: true
          schema:
            type: string
            description: 'Search keyword'
            example: omnis
        -
          in: query
          name: p
          description: 'Page number, default=20'
          example: 1
          required: true
          schema:
            type: integer
            description: 'Page number, default=20'
            example: 1
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept type,link,enable'
          example: type
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept type,link,enable'
            example: type
        -
          in: query
          name: 'filter[type]'
          description: 'Filter by type'
          example: et
          required: true
          schema:
            type: string
            description: 'Filter by type'
            example: et
        -
          in: query
          name: 'filter[enable]'
          description: 'Filter by enable'
          example: 20
          required: true
          schema:
            type: integer
            description: 'Filter by enable'
            example: 20
        -
          in: query
          name: 'filter[link]'
          description: 'Filter by link'
          example: distinctio
          required: true
          schema:
            type: string
            description: 'Filter by link'
            example: distinctio
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
  '/api/social_medias/{id}':
    get:
      summary: 'Social Media Detail'
      operationId: socialMediaDetail
      description: 'Social media detail'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
    put:
      summary: 'Social Media Create'
      operationId: socialMediaCreate
      description: 'Social media create'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                link:
                  type: string
                  description: ''
                  example: reprehenderit
                enable:
                  type: boolean
                  description: ''
                  example: false
              required:
                - enable
    delete:
      summary: 'Social Media Delete'
      operationId: socialMediaDelete
      description: 'Social media delete'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the social media.'
        example: 1
        required: true
        schema:
          type: integer
  /api/options/roles:
    get:
      summary: Options
      operationId: options
      description: 'List out all records for select options'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
  /api/options/permissions:
    get:
      summary: Options
      operationId: options
      description: 'List out all records for select options'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
  /api/options/customers:
    get:
      summary: Options
      operationId: options
      description: 'List out all records for select options'
      parameters:
        -
          in: query
          name: 'filter[id]'
          description: 'Filter by customer id'
          example: 2
          required: true
          schema:
            type: integer
            description: 'Filter by customer id'
            example: 2
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by customer name'
          example: porro
          required: true
          schema:
            type: string
            description: 'Filter by customer name'
            example: porro
        -
          in: query
          name: 'filter[tel]'
          description: 'Filter by customer tel'
          example: dolorem
          required: true
          schema:
            type: string
            description: 'Filter by customer tel'
            example: dolorem
        -
          in: query
          name: 'filter[email]'
          description: 'Filter by customer email'
          example: eius
          required: true
          schema:
            type: string
            description: 'Filter by customer email'
            example: eius
        -
          in: query
          name: sort
          description: 'Sort by column name, `-` equal to descending. Accept id,name,tel,email'
          example: '-id'
          required: true
          schema:
            type: string
            description: 'Sort by column name, `-` equal to descending. Accept id,name,tel,email'
            example: '-id'
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'CMS API'
  /api/row_updates/banners:
    post:
      summary: 'Row Update Banner'
      operationId: rowUpdateBanner
      description: 'Datatable row update banner sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the record'
                  example: 20
                sequence:
                  type: integer
                  description: 'The sequence of the record'
                  example: 2
              required:
                - id
                - sequence
  /api/row_updates/categories:
    post:
      summary: 'Row Update Category'
      operationId: rowUpdateCategory
      description: 'Datatable row update category sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the record'
                  example: 5
                sequence:
                  type: integer
                  description: 'The sequence of the record'
                  example: 18
              required:
                - id
                - sequence
  /api/row_updates/services:
    post:
      summary: 'Row Update Service'
      operationId: rowUpdateService
      description: 'Datatable row update service sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the record'
                  example: 9
                sequence:
                  type: integer
                  description: 'The sequence of the record'
                  example: 18
              required:
                - id
                - sequence
  /api/row_updates/districts:
    post:
      summary: 'Row Update District'
      operationId: rowUpdateDistrict
      description: 'Datatable row update district sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the record'
                  example: 7
                sequence:
                  type: integer
                  description: 'The sequence of the record'
                  example: 6
              required:
                - id
                - sequence
  /api/drags/banners:
    post:
      summary: 'Drag Update Banner'
      operationId: dragUpdateBanner
      description: 'Datatable drag update banner sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rows:
                  type: array
                  description: ''
                  example:
                    - ad
                  items:
                    type: string
              required:
                - rows
  /api/drags/categories:
    post:
      summary: 'Drag Update Category'
      operationId: dragUpdateCategory
      description: 'Datatable drag update category sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rows:
                  type: array
                  description: ''
                  example:
                    - et
                  items:
                    type: string
              required:
                - rows
  /api/drags/services:
    post:
      summary: 'Drag Update Service'
      operationId: dragUpdateService
      description: 'Datatable drag update service sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rows:
                  type: array
                  description: ''
                  example:
                    - praesentium
                  items:
                    type: string
              required:
                - rows
  /api/drags/districts:
    post:
      summary: 'Drag Update District'
      operationId: dragUpdateDistrict
      description: 'Datatable drag update district sequence'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rows:
                  type: array
                  description: ''
                  example:
                    - sit
                  items:
                    type: string
              required:
                - rows
  /api/bulk_updates/banners:
    post:
      summary: 'Bulk Update Banner'
      operationId: bulkUpdateBanner
      description: 'Bulk update banners param or delete on listing page'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: 'The id of the record'
                  example:
                    - 13
                  items:
                    type: integer
                enable:
                  type: boolean
                  description: 'Enable or disable the record'
                  example: true
                hot:
                  type: boolean
                  description: 'Update hot(Apply to service API only)'
                  example: true
                delete:
                  type: boolean
                  description: 'Delete selected record'
                  example: false
              required:
                - ids
                - enable
                - hot
                - delete
  /api/bulk_updates/categories:
    post:
      summary: 'Bulk Update Category'
      operationId: bulkUpdateCategory
      description: 'Bulk update categories param or delete on listing page'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: 'The id of the record'
                  example:
                    - 20
                  items:
                    type: integer
                enable:
                  type: boolean
                  description: 'Enable or disable the record'
                  example: false
                hot:
                  type: boolean
                  description: 'Update hot(Apply to service API only)'
                  example: false
                delete:
                  type: boolean
                  description: 'Delete selected record'
                  example: true
              required:
                - ids
                - enable
                - hot
                - delete
  /api/bulk_updates/services:
    post:
      summary: 'Bulk Update Service'
      operationId: bulkUpdateService
      description: 'Bulk update services param or delete on listing page'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: 'The id of the record'
                  example:
                    - 2
                  items:
                    type: integer
                enable:
                  type: boolean
                  description: 'Enable or disable the record'
                  example: true
                hot:
                  type: boolean
                  description: 'Update hot(Apply to service API only)'
                  example: true
                delete:
                  type: boolean
                  description: 'Delete selected record'
                  example: false
              required:
                - ids
                - enable
                - hot
                - delete
  /api/bulk_updates/districts:
    post:
      summary: 'Bulk Update District'
      operationId: bulkUpdateDistrict
      description: 'Bulk update districts param or delete on listing page'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: 'The id of the record'
                  example:
                    - 10
                  items:
                    type: integer
                enable:
                  type: boolean
                  description: 'Enable or disable the record'
                  example: true
                hot:
                  type: boolean
                  description: 'Update hot(Apply to service API only)'
                  example: false
                delete:
                  type: boolean
                  description: 'Delete selected record'
                  example: false
              required:
                - ids
                - enable
                - hot
                - delete
  /api/bulk_updates/reviews:
    post:
      summary: 'Bulk Update Review'
      operationId: bulkUpdateReview
      description: 'Bulk update reviews param or delete on listing page'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: 'The id of the record'
                  example:
                    - 19
                  items:
                    type: integer
                enable:
                  type: boolean
                  description: 'Enable or disable the record'
                  example: true
                hot:
                  type: boolean
                  description: 'Update hot(Apply to service API only)'
                  example: false
                delete:
                  type: boolean
                  description: 'Delete selected record'
                  example: true
              required:
                - ids
                - enable
                - hot
                - delete
  /api/bulk_updates/social_medias:
    post:
      summary: 'Bulk Update Social Media'
      operationId: bulkUpdateSocialMedia
      description: 'Bulk update social media param or delete on listing page'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'CMS API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: 'The id of the record'
                  example:
                    - 15
                  items:
                    type: integer
                enable:
                  type: boolean
                  description: 'Enable or disable the record'
                  example: false
                hot:
                  type: boolean
                  description: 'Update hot(Apply to service API only)'
                  example: true
                delete:
                  type: boolean
                  description: 'Delete selected record'
                  example: false
              required:
                - ids
                - enable
                - hot
                - delete
tags:
  -
    name: 'CMS API'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
